#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use Getopt::Long;

use Neurospaces;
use Neurospaces::Traversal;

# use Neurospaces_embed;


$SIG{__DIE__}
    = sub {
	use Carp;

	confess @_;
    };


my $option_condition;
my $option_gui;
my $option_interactive;
my $option_models = '/local_home/local_home/hugo/neurospaces_project/neurospaces/source/c/snapshots/0/library';
my $option_querymachine;
my $option_reporting_fields = [];
my $option_shrinkage = 1;
my $option_spine_prototypes = [];
my $option_traversal_symbol;
my $option_type;
my $option_verbose;


sub main
{
    read_cmd_line();

    my $neurospaces = Neurospaces->new();

    # my $args = [ "$0", "-P", "-q", "cells/golgi.ndf" ];

    my $args = [ "$0", "-P", ];

    if ($option_models)
    {
	$ENV{NEUROSPACES_MODELS} = $option_models;
    }

    if ($option_querymachine)
    {
	push @$args, '-q';
    }

#     push @$args, @ARGV;

    my $success
	= $neurospaces->load
	    (
	     {
	      'filename' => $ARGV[0],
	      'shrinkage' => $option_shrinkage,
	      'spine-prototypes' => $option_spine_prototypes,
	     },
	     $args,
	    );

    if ($option_interactive)
    {
	#t not sure yet, should be perhaps based on the perl shell ?
    }

    if ($option_gui)
    {
	require Neurospaces::GUI;
	Neurospaces::GUI::gui("bin/neurospaces");
    }

    if ($option_traversal_symbol)
    {
	my $symbol;
	my $parameters = [];

	#! never use this functionality, avoid shell quoting issues,
	#! use the field options instead.

	if (0 && $option_traversal_symbol =~ /^([^-]+)->(.+)$/)
	{
	    $symbol = $1;
	    $parameters = [ $2, ];
	}
	else
	{
	    $symbol = $option_traversal_symbol;
	}

	if (@$option_reporting_fields)
	{
	    $parameters = $option_reporting_fields;
	}

	my $traversal
	    = Neurospaces::Traversal->new
		(
		 {
		  context => $symbol,
		  processor =>
		  sub
		  {
		      my $self = shift;

		      my $descendant = shift;

		      my $d = $descendant;

		      if ($option_type)
		      {
			  if ($descendant->{type} !~ /$option_type/)
			  {
			      return 1;
			  }
		      }

		      if ($option_condition)
		      {
			  my $condition = eval $option_condition;

			  if ($@)
			  {
			      die $@;
			  }

			  if (!$condition)
			  {
			      return 1;
			  }
		      }

		      if (@$parameters)
		      {
			  foreach my $parameter (@$parameters)
			  {
			      my $value
				  = SwiggableNeurospaces::symbol_parameter_resolve_value
				      (
				       $descendant->{_symbol},
				       $parameter,
				       $descendant->{_context}
				      );

			      if ($value != $SwiggableNeurospaces::dFLT_MAX)
			      {
				  print $descendant->{context} . "->" . $parameter . " = " . $value . "\n";
			      }
			  }
		      }
		      else
		      {
			  print "$descendant->{context}\n";
		      }

		      return 1;
		  },
		  neurospaces => $neurospaces,
		 },
		);

	my $success = $traversal->go();

	if (!$success)
	{
	    print "Traversal failed\n";
	}
	else
	{
	    print "Traversal ok\n";
	}
    }


}


sub read_cmd_line
{
    my $option_help;

    my $result
	= GetOptions
	    (
	     "condition=s" => \$option_condition,
	     "gui!" => \$option_gui,
	     "help!" => \$option_help,
	     "interactive!" => \$option_interactive,
	     "models=s" => \$option_models,
	     "query!" => \$option_querymachine,
	     "reporting-fields=s" => $option_reporting_fields,
	     "shrinkage=s" => \$option_shrinkage,
	     "spine-prototypes=s" => $option_spine_prototypes,
	     "traversal-symbol=s" => \$option_traversal_symbol,
	     "type=s" => \$option_type,
	     "v|verbose+" => \$option_verbose,
	    );

    if ($option_help || @ARGV eq 0)
    {
	print
	    "
$0 <model-filename>

$0: parse a model description, interact with the model.

options :
    condition          a (perl) condition to apply, where applicable.
    gui                enter the gui.
    help               print usage information.
    interactive        enter interactive mode.
    models             directory where to find the neurospaces library.
    query              enter the query machine after parsing.
    reporting-fields   report these fields during traversing (use multiple options to report multiple fields).
    shrinkage          shrinkage correction
                       NOTE: this is only applied when loading files that need conversion,
                       it is not applied when reading ndf files.
    spine-prototypes   add spines with this prototype
    traversal-symbol   symbol to traverse.
    type               type to traverse
    verbose            set verbosity level.
";

	exit 1;
    }
}


main();







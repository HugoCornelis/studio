#!/usr/bin/perl -w
#!/usr/bin/perl -d:ptkdb -w
#

use strict;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! make distcheck

    push @INC, '../../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use Getopt::Long;

use YAML;


my $global_operators
    = {
       average =>
       sub
       {
	   #t need to add stddev.

	   my ($description, $final_value, $descendant, $parameter, $value) = @_;

	   my $count = 0;

	   if (defined $description)
	   {
	       $description =~ /([0-9]+)/;

	       $count = $1;
	   }

	   $count++;

	   (!defined $final_value) && ($final_value = $value);

# 	   print ("\naverage of $count value(s)", $final_value, ' ', $value, ' ', $final_value - ($final_value - $value) / $count);

	   return ("average of $count value(s)", $final_value - ($final_value - $value) / $count);
       },
       cumulate =>
       sub
       {
	   my ($description, $final_value, $descendant, $parameter, $value) = @_;

	   return ('cumulated value', ($final_value || 0) + $value);
       },
       length_average =>
       sub
       {
	   my ($description, $final_value, $descendant, $parameter, $value) = @_;

	   my $length
	       = SwiggableNeurospaces::symbol_parameter_resolve_value
		   ($descendant->{_symbol},
		    $descendant->{_context},
		    "LENGTH",
		   );

	   if ($value != $SwiggableNeurospaces::dDBL_MAX)
	   {
	       my $count = 0;

	       if (defined $description)
	       {
		   $description =~ /([0-9]+)/;

		   $count = $1;
	       }

	       $count++;

	       (!defined $final_value) && ($final_value = 0);

	       return ("average of $count value(s)", $final_value + $value * $length / $count);
	   }
       },
       maximum =>
       sub
       {
	   my ($description, $final_value, $descendant, $parameter, $value) = @_;

	   !defined $final_value && return("$descendant->{context}->$parameter", $value);

	   return $final_value >= $value ? ($description, $final_value) : ("$descendant->{context}->$parameter", $value);
       },
       minimum =>
       sub
       {
	   my ($description, $final_value, $descendant, $parameter, $value) = @_;

	   !defined $final_value && return("$descendant->{context}->$parameter", $value);

	   return $final_value <= $value ? ($description, $final_value) : ("$descendant->{context}->$parameter", $value);
       },
      };

my $operator_results = {};


use Data::Dumper;


# {
#     no strict "refs";

#     print Dumper(\%{"main::"});

#     print "Found these methods for Neurospaces::\n";

#     print Dumper(\%{"Neurospaces::"});

#     print "Found these methods for Neurospaces::Traversal::\n";

#     print Dumper(\%{"Neurospaces::Traversal::"});

#     print "Found these methods for SwiggableNeurospaces::\n";

#     print Dumper(\%{"SwiggableNeurospaces::"});

#     print "Found these methods for SwiggableNeurospaces::PidinStack::\n";

#     print Dumper(\%{"SwiggableNeurospaces::PidinStack::"});

#     print "Found these methods for SwiggableNeurospaces::descr_Segment::\n";

#     print Dumper(\%{"SwiggableNeurospaces::descr_Segment::"});

#     print "Found these methods for SwiggableNeurospaces::symtab_Segment::\n";

#     print Dumper(\%{"SwiggableNeurospaces::symtab_Segment::"});

#     print "Found these methods for SwiggableNeurospaces::symtab_BioComponent::\n";

#     print Dumper(\%{"SwiggableNeurospaces::symtab_BioComponent::"});

#     print "Found these methods for SwiggableNeurospaces::Symbols::\n";

#     print Dumper(\%{"SwiggableNeurospaces::Symbols::"});

# }


# use Neurospaces_embed;


BEGIN
{
    $SIG{__DIE__}
	= sub {
	    use Carp;

	    confess @_;
	};
}


my $option_algorithm;
my $option_backend_options = [];
my $option_commands = [];
my $option_condition = [];
my $option_force_library;
my $option_gui;
my $option_interactive;
my $option_models = '/usr/local/neurospaces/models/library';
my $option_no_use_library;
my $option_operators = [];
our $option_protocol;
my $option_querymachine;
my $option_render = [];
my $option_reporting_fields = [];
my $option_scaling;
my $option_show;
my $option_shrinkage_correction;
my $option_spine_prototypes = [];
my $option_traversal_symbol;
my $option_type;
our $option_verbose;


sub main
{
    read_cmd_line();

    #! for proper error reporting of loading modules (Renderer etc),
    #! 'require' must be used, not 'use'.

    require Neurospaces;
    require Neurospaces::Traversal;
    require Neurospaces::Studio;

    my $neurospaces = Neurospaces->new();

    # my $args = [ "$0", "-q", "cells/golgi.ndf" ];

    my $args = [ "$0", ];

    if ($option_models)
    {
	$ENV{NEUROSPACES_NMC_MODELS} = $option_models;
    }

    if ($option_querymachine)
    {
	push @$args, '-q';
    }

#     push @$args, @ARGV;

    my $success
	= $neurospaces->load
	    (
	     undef,
	     {
	      'backend_options' => $option_backend_options,
	      'commands' => $option_commands,
	      'force-library' => $option_force_library,
	      'filename' => $ARGV[0],
	      (defined $option_no_use_library) ? ('no-use-library' => $option_no_use_library) : (),
	      (defined $option_shrinkage_correction) ? ('shrinkage' => $option_shrinkage_correction) : (),
	      'spine-prototypes' => $option_spine_prototypes,
	     },
	     $args,
	    );

    if ($option_interactive)
    {
	#t not sure yet, should be perhaps based on the perl shell ?
    }

    # load additional data to render before opening the gui

    if (@$option_render)
    {
	require Neurospaces::GUI::Tools::Renderer::External;

	foreach my $external (@$option_render)
	{
	    Neurospaces::GUI::Tools::Renderer::External::load($external);
	}
    }

    if ($option_show)
    {
	my $d3renderer = $Neurospaces::Studio::d3renderer;

	if (!$d3renderer)
	{
	    print STDERR "d3renderer is not initialized (value is $d3renderer)\n";
	}
	else
	{
	    my $morphology_name = $ARGV[0];

	    $morphology_name =~ s/.*\///;

	    $morphology_name =~ s/\.swc$//i;
	    $morphology_name =~ s/\.p$//i;

	    $morphology_name =~ s/\./_/g;

	    my $symbol_name = "/$morphology_name/$option_show";

	    my $serial = $option_show;

	    my $studio = Neurospaces::Studio->new();

	    require Neurospaces::GUI;
	    my $symbol = Neurospaces::GUI::Components::Node::factory( { serial => $serial, studio => $studio, }, );

	    $d3renderer->symbols_clear();

	    $d3renderer->symbol_add($symbol);

	    $d3renderer->start();
	}

	# force to have a quit button

	$option_gui = 1;
    }

    if ($option_gui)
    {
	require Neurospaces::GUI;
	Neurospaces::GUI::gui($0);
    }

#     my $d3renderer = $Neurospaces::Studio::d3renderer;

#     if ($d3renderer)
#     {
# 	$d3renderer->start();
#     }

    # from here on, go through the options alphabetically

    if ($option_algorithm)
    {
	$neurospaces->algorithm_instance_report($option_algorithm);
    }

    if ($option_traversal_symbol)
    {
	my $symbol;
	my $parameters = [];
	my $operator_names = [];

	#! never use this functionality, avoid shell quoting issues,
	#! use the field options instead.

	if (0 && $option_traversal_symbol =~ /^([^-]+)->(.+)$/)
	{
	    $symbol = $1;
	    $parameters = [ $2, ];
	}
	else
	{
	    $symbol = $option_traversal_symbol;
	}

	if (@$option_reporting_fields)
	{
	    $parameters = $option_reporting_fields;
	}

	if (@$option_operators)
	{
	    $operator_names = $option_operators;
	}

	if (!@$parameters)
	{
	    print "---\npaths:\n";
	}
	elsif (!@$option_operators)
	{
	    print "---\nparameters:\n";
	}

	my $traversal
	    = Neurospaces::Traversal->new
		(
		 {
		  context => $symbol,
		  processor =>
		  sub
		  {
		      my $self = shift;

		      my $descendant = shift;

		      my $d = $descendant;

		      if ($option_type)
		      {
			  if ($descendant->{type} !~ /$option_type/)
			  {
			      return 1;
			  }
		      }

		      if (@$option_condition)
		      {
			  foreach my $condition (@$option_condition)
			  {
			      my $value = eval $condition;

			      if ($@)
			      {
				  die $@;
			      }

			      if (!$value)
			      {
				  return 1;
			      }
			  }
		      }

		      if (@$parameters)
		      {
			  foreach my $parameter (@$parameters)
			  {
			      my $value;

			      if ($option_scaling)
			      {
				  $value
				      = SwiggableNeurospaces::symbol_parameter_resolve_scaled_value
					  (
					   $descendant->{_symbol},
					   $descendant->{_context},
					   $parameter,
					  );
			      }
			      else
			      {
				  $value
				      = SwiggableNeurospaces::symbol_parameter_resolve_value
					  (
					   $descendant->{_symbol},
					   $descendant->{_context},
					   $parameter,
					  );
			      }

			      if (@$operator_names)
			      {
				  foreach my $operator_name (@$operator_names)
				  {
				      my $operator = $global_operators->{$operator_name};

				      if (!defined $operator)
				      {
					  die "$0: $operator_name is not defined";
				      }

				      if (ref $operator eq 'CODE')
				      {
					  my $description = $operator_results->{$operator_name}->{description};
					  my $final_value = $operator_results->{$operator_name}->{final_value};

					  ($description, $final_value) = &$operator($description, $final_value, $descendant, $parameter, $value);

					  if (!defined $final_value)
					  {
					      die "$0: $operator_name returned an error condition";
					  }

					  $operator_results->{$operator_name}->{description} = $description;
					  $operator_results->{$operator_name}->{final_value} = $final_value;
				      }
				      else
				      {
					  die "$0: $operator_name is not a CODE reference";
				      }
				  }
			      }
			      else
			      {
				  if ($value != $SwiggableNeurospaces::dDBL_MAX)
				  {
				      print "  '" . $descendant->{context} . "->" . $parameter . "': " . $value . "\n";
				  }
			      }
			  }
		      }
		      else
		      {
			  print "  - $descendant->{context}\n";
		      }

		      return 1;
		  },
		  neurospaces => $neurospaces,
		 },
		);

	my $success = $traversal->go();

	if (!$success)
	{
	    print STDERR "Traversal failed\n";
	}
	else
	{
	    if (@$operator_names)
	    {
		foreach my $operator_name (sort @$operator_names)
		{
		    my $description = $operator_results->{$operator_name}->{description};
		    my $final_value = $operator_results->{$operator_name}->{final_value};

		    print "---\n$operator_name:
  description: $description
  final_value: $final_value\n";
		}
	    }
	}
    }


}


sub read_cmd_line
{
    my $option_help;
    my $option_version;

    my $result
	= GetOptions
	    (
	     "algorithm=s" => \$option_algorithm,
	     "backend-options=s" => $option_backend_options,
	     "commands=s" => $option_commands,
	     "condition=s" => $option_condition,
	     "force-library!" => \$option_force_library,
	     "gui!" => \$option_gui,
	     "help!" => \$option_help,
	     "interactive!" => \$option_interactive,
	     "models=s" => \$option_models,
	     "no-use-library!" => \$option_no_use_library,
	     "operators=s" => $option_operators,
	     "protocol=s" => \$option_protocol,
	     "query!" => \$option_querymachine,
	     "render=s" => $option_render,
	     "reporting-fields=s" => $option_reporting_fields,
	     "scaling!" => \$option_scaling,
	     "show=s" => \$option_show,
	     "shrinkage-correction=s" => \$option_shrinkage_correction,
	     "spine-prototypes=s" => $option_spine_prototypes,
	     "traversal-symbol=s" => \$option_traversal_symbol,
	     "type=s" => \$option_type,
	     "v|verbose+" => \$option_verbose,
	     "version" => \$option_version,
	    );

    if ($option_version)
    {
	my $version = version();

	print $version . "\n";

	exit 1;
    }

    if ($option_help || @ARGV eq 0)
    {
	print
	    "
$0 <model-filename>

$0: parse a model description, interact with the model.

options :
    --algorithm              report on an algorithm instance.
    --backend-options        options to pass to the neurospaces backend.
    --commands               execute these query machine commands after loading a file.
    --condition              a (perl) condition to apply, where applicable.
    --force-library          force the use of library values for morphology2ndf.
    --gui                    enter the gui.
    --help                   print usage information.
    --interactive            enter interactive mode.
    --models                 directory where to find the neurospaces library (default is $option_models).
    --no-use-library         do not use the library with specific settings for each morphology.
    --operators              apply these operators to each reported field.
    --protocol               protocol used to do color coding of morphologies.
    --query                  enter the query machine after parsing.
    --render                 render a file, using a renderer plugin.
    --reporting-fields       report these fields during traversing (use multiple options to report multiple fields).
    --scaling                apply scaling to the reported parameter values,
                             can be used in combination with cumulate.
    --show                   find and show this component in the renderer.
    --shrinkage-correction   shrinkage correction
                             NOTE: this is only applied when loading files that need conversion,
                             it is not applied when reading ndf files.
    --spine-prototypes       add spines with this prototype
    --traversal-symbol       symbol to traverse.
    --type                   type to traverse
    --verbose                set verbosity level.
    --version                give version information.
";

	exit 1;
    }
}


sub version
{
    # $Format: "    my $version=\"${package}-${label}\";"$
    my $version="studio-userdocs-6";

    return $version;
}


main();


